diff -Naur linux/include/linux/platform_data/huawei-planck-ec.h orig-linux-sdm845-6.16-dev/include/linux/platform_data/huawei-planck-ec.h
--- linux/include/linux/platform_data/huawei-planck-ec.h	1970-01-01 08:00:00.000000000 +0800
+++ orig-linux-sdm845-6.16-dev/include/linux/platform_data/huawei-planck-ec.h	2025-07-13 20:45:43.658664948 +0800
@@ -0,0 +1,25 @@
+#ifndef __HUAWEI_PLANCK_EC_H__
+#define __HUAWEI_PLANCK_EC_H__
+
+struct planck_ec;
+struct notifier_block;
+
+#define PLANCK_MOD_NAME			"huawei_planck_ec"
+#define PLANCK_DEV_PSY			"psy"
+#define PLANCK_DEV_UCSI			"ucsi"
+
+enum planck_ec_transfer_operation {
+	PLANCK_EC_READ_EVENT,
+	PLANCK_EC_READ_COMMON,
+	PLANCK_EC_READ_UCSI,
+	PLANCK_EC_WRITE_BACKLIGHT,
+	PLANCK_EC_WRITE_UCSI
+};
+
+int planck_ec_transfer(struct planck_ec *ec, u8 cmd,
+					   u8 *data, u8 data_len, enum planck_ec_transfer_operation op);
+
+int planck_ec_register_notify(struct planck_ec *ec, struct notifier_block *nb);
+void planck_ec_unregister_notify(struct planck_ec *ec, struct notifier_block *nb);
+
+#endif
diff -Naur linux/drivers/platform/arm64/huawei-planck-ec.c orig-linux-sdm845-6.16-dev/drivers/platform/arm64/huawei-planck-ec.c
--- linux/drivers/platform/arm64/huawei-planck-ec.c	1970-01-01 08:00:00.000000000 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/platform/arm64/huawei-planck-ec.c	2025-07-24 18:33:43.087699794 +0800
@@ -0,0 +1,358 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2024-2025
+ *
+ * NewWheat <newwheatzjz@outlook.com>
+ */
+#include <linux/auxiliary_bus.h>
+#include <linux/backlight.h>
+#include <linux/delay.h>
+#include <linux/device.h>
+#include <linux/i2c.h>
+#include <linux/input.h>
+#include <linux/irqreturn.h>
+#include <linux/module.h>
+#include <linux/mutex.h>
+#include <linux/notifier.h>
+#include <linux/platform_data/huawei-planck-ec.h>
+
+#define PLANCK_EC_READ_EVENT_REG		0x31
+#define PLANCK_EC_READ_COMMON_REQ_REG		0x21
+#define PLANCK_EC_READ_COMMON_RESP_REG		0x21
+#define PLANCK_EC_READ_UCSI_REQ_REG		0xa2
+#define PLANCK_EC_READ_UCSI_RESP_REG		0xa0
+
+#define PLANCK_EC_WRITE_BACKLIGHT_REG		0x20
+#define PLANCK_EC_WRITE_UCSI_REG		0xa1
+
+#define PLANCK_EC_WRITE_BACKLIGHT_CMD		0xff
+
+#define PLANCK_EC_BACKLIGHT_DEFAULT		127
+#define PLANCK_EC_BACKLIGHT_MAX		255
+
+#define PLANCK_EC_EVENT_LID_OPEN		0x20
+#define PLANCK_EC_EVENT_LID_CLOSE		0x21
+
+struct planck_ec {
+	struct i2c_client *client;
+	struct mutex lock;
+	struct blocking_notifier_head notifier_list;
+	struct backlight_device *bl;
+	struct input_dev *idev;
+};
+
+static int planck_ec_read_event(struct planck_ec *ec, u8 *data)
+{
+	struct i2c_client *client = ec->client;
+
+	guard(mutex)(&ec->lock);
+
+	*data = i2c_smbus_read_byte_data(client, PLANCK_EC_READ_EVENT_REG);
+
+	if (*data < 0) {
+		dev_err(&client->dev, "EC read_event failed: %pe\n", ERR_PTR(*data));
+	}
+
+	return *data < 0 ? *data : 0;
+}
+
+static int planck_ec_read_common(struct planck_ec *ec, u8 cmd, u8 *data, u8 data_len)
+{
+	struct i2c_client *client = ec->client;
+	int ret = 0;
+
+	guard(mutex)(&ec->lock);
+
+	ret |= i2c_smbus_write_byte_data(client, PLANCK_EC_READ_COMMON_REQ_REG, cmd);
+	ret |= i2c_smbus_read_i2c_block_data(client, PLANCK_EC_READ_COMMON_RESP_REG, data_len, data);
+
+	if (ret < 0) {
+		dev_err(&client->dev, "EC read_common failed: %pe, cmd: 0x%x\n", ERR_PTR(ret), cmd);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int planck_ec_read_ucsi(struct planck_ec *ec, u8 cmd, u8 *data, u8 data_len)
+{
+	struct i2c_client *client = ec->client;
+	int ret = 0;
+
+	guard(mutex)(&ec->lock);
+
+	ret |= i2c_smbus_write_byte_data(client, PLANCK_EC_READ_UCSI_REQ_REG, cmd);
+	ret |= i2c_smbus_read_i2c_block_data(client, PLANCK_EC_READ_UCSI_RESP_REG, data_len, data);
+
+	if (ret < 0) {
+		dev_err(&client->dev, "EC read_ucsi failed: %pe, cmd: 0x%x\n", ERR_PTR(ret), cmd);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int planck_ec_write_backlight(struct planck_ec *ec, u8 *data)
+{
+	struct i2c_client *client = ec->client;
+	u8 tmp[2] = {PLANCK_EC_WRITE_BACKLIGHT_CMD, *data};
+	int ret;
+
+	guard(mutex)(&ec->lock);
+
+	ret = i2c_smbus_write_i2c_block_data(client, PLANCK_EC_WRITE_BACKLIGHT_REG, sizeof(tmp), tmp);
+
+	if (ret < 0) {
+		dev_err(&client->dev, "EC write_backlight failed: %pe\n", ERR_PTR(ret));
+		return ret;
+	}
+
+	return 0;
+}
+
+static int planck_ec_write_ucsi(struct planck_ec *ec, u8 *data, u8 data_len)
+{
+	struct i2c_client *client = ec->client;
+	int ret;
+
+	guard(mutex)(&ec->lock);
+
+	ret = i2c_smbus_write_i2c_block_data(client, PLANCK_EC_WRITE_UCSI_REG, data_len, data);
+
+	if (ret < 0) {
+		dev_err(&client->dev, "EC write_ucsi failed: %pe\n", ERR_PTR(ret));
+		return ret;
+	}
+
+	return 0;
+}
+
+/* Common APIs */
+
+int planck_ec_transfer(struct planck_ec *ec, u8 cmd,
+					   u8 *data, u8 data_len, enum planck_ec_transfer_operation op)
+{
+	int ret = 0;
+
+	/* We sleep here to avoid -ENXIO caused by frequent i2c transfers */
+	msleep(13);
+
+	switch (op) {
+	case PLANCK_EC_READ_EVENT:
+		ret = planck_ec_read_event(ec, data);
+		break;
+
+	case PLANCK_EC_READ_COMMON:
+		ret = planck_ec_read_common(ec, cmd, data, data_len);
+		break;
+
+	case PLANCK_EC_READ_UCSI:
+		ret = planck_ec_read_ucsi(ec, cmd, data, data_len);
+		break;
+
+	case PLANCK_EC_WRITE_BACKLIGHT:
+		ret = planck_ec_write_backlight(ec, data);
+		break;
+
+	case PLANCK_EC_WRITE_UCSI:
+		ret = planck_ec_write_ucsi(ec, data, data_len);
+		break;
+
+	default:
+		return 0;
+	}
+
+	return ret;
+}
+EXPORT_SYMBOL_GPL(planck_ec_transfer);
+
+int planck_ec_register_notify(struct planck_ec *ec, struct notifier_block *nb)
+{
+	return blocking_notifier_chain_register(&ec->notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(planck_ec_register_notify);
+
+void planck_ec_unregister_notify(struct planck_ec *ec, struct notifier_block *nb)
+{
+	blocking_notifier_chain_unregister(&ec->notifier_list, nb);
+}
+EXPORT_SYMBOL_GPL(planck_ec_unregister_notify);
+
+/* Backlight */
+
+static int planck_ec_backlight_update_status(struct backlight_device *bl)
+{
+	struct planck_ec *ec = bl_get_data(bl);
+	int brightness = backlight_get_brightness(bl);
+	int ret = 0;
+
+	ret = planck_ec_transfer(ec, 0, (u8*)&brightness, sizeof(brightness), PLANCK_EC_WRITE_BACKLIGHT);
+
+	return ret;
+}
+
+static const struct backlight_ops planck_ec_backlight_ops = {
+	.options = BL_CORE_SUSPENDRESUME,
+	.update_status = planck_ec_backlight_update_status,
+};
+
+static const struct backlight_properties planck_ec_backlight_props = {
+	.type = BACKLIGHT_RAW,
+	.scale = BACKLIGHT_SCALE_LINEAR,
+	.brightness = PLANCK_EC_BACKLIGHT_DEFAULT,
+	.max_brightness = PLANCK_EC_BACKLIGHT_MAX,
+};
+
+/* IRQ Handler */
+
+static irqreturn_t planck_ec_irq_handler(int irq, void *data)
+{
+	struct planck_ec *ec = data;
+	int id = 0;
+
+	planck_ec_transfer(ec, 0, (u8*)&id, sizeof(id), PLANCK_EC_READ_EVENT);
+
+	if (id < 0) {
+		return IRQ_HANDLED;
+	}
+
+	switch (id) {
+	case PLANCK_EC_EVENT_LID_OPEN:
+		input_report_switch(ec->idev, SW_LID, 0);
+		input_sync(ec->idev);
+		break;
+
+	case PLANCK_EC_EVENT_LID_CLOSE:
+		input_report_switch(ec->idev, SW_LID, 1);
+		input_sync(ec->idev);
+		break;
+
+	default:
+		blocking_notifier_call_chain(&ec->notifier_list, id, ec);
+	}
+
+	return IRQ_HANDLED;
+}
+
+static void planck_ec_aux_release(struct device *dev)
+{
+	struct auxiliary_device *adev = to_auxiliary_dev(dev);
+
+	kfree(adev);
+}
+
+static void planck_ec_aux_remove(void *data)
+{
+	struct auxiliary_device *adev = data;
+
+	auxiliary_device_delete(adev);
+	auxiliary_device_uninit(adev);
+}
+
+static int planck_aux_init(struct device *parent, const char *name,
+						   struct planck_ec *ec)
+{
+	struct auxiliary_device *adev;
+	int ret;
+
+	adev = kzalloc(sizeof(*adev), GFP_KERNEL);
+	if (!adev)
+		return -ENOMEM;
+
+	adev->name = name;
+	adev->id = 0;
+	adev->dev.parent = parent;
+	adev->dev.release = planck_ec_aux_release;
+	adev->dev.platform_data = ec;
+
+	device_set_of_node_from_dev(&adev->dev, parent);
+
+	ret = auxiliary_device_init(adev);
+	if (ret < 0) {
+		kfree(adev);
+		return ret;
+	}
+
+	ret = auxiliary_device_add(adev);
+	if (ret < 0) {
+		auxiliary_device_uninit(adev);
+		return ret;
+	}
+
+	return devm_add_action_or_reset(parent, planck_ec_aux_remove, adev);
+}
+
+static int planck_ec_probe(struct i2c_client *client)
+{
+	struct device *dev = &client->dev;
+	struct planck_ec *ec;
+	int ret;
+
+	ec = devm_kzalloc(dev, sizeof(*ec), GFP_KERNEL);
+	if (!ec)
+		return -ENOMEM;
+
+	mutex_init(&ec->lock);
+	ec->client = client;
+	BLOCKING_INIT_NOTIFIER_HEAD(&ec->notifier_list);
+
+	ec->bl = devm_backlight_device_register(&client->dev, "planck-ec-backlight",
+											&client->dev, ec, &planck_ec_backlight_ops,
+											&planck_ec_backlight_props);
+
+    if (IS_ERR(ec->bl))
+		return dev_err_probe(dev, PTR_ERR(ec->bl), 
+							 "Failed to register backlight device\n");
+
+	backlight_update_status(ec->bl);
+
+	ec->idev = devm_input_allocate_device(dev);
+	if (!ec->idev)
+		return -ENOMEM;
+
+	ec->idev->name = "planck-ec-lid";
+	ec->idev->phys = "planck-ec/input0";
+	input_set_capability(ec->idev, EV_SW, SW_LID);
+
+	ret = input_register_device(ec->idev);
+	if (ret < 0)
+		return dev_err_probe(dev, ret, "Failed to register input device\n");
+
+	ret = devm_request_threaded_irq(dev, client->irq,
+									NULL, planck_ec_irq_handler,
+									IRQF_ONESHOT, dev_name(dev), ec);
+	if (ret < 0)
+		return dev_err_probe(dev, ret, "Failed to request irq\n");
+
+	ret = planck_aux_init(dev, PLANCK_DEV_PSY, ec);
+	if (ret < 0)
+		return ret;
+
+	return planck_aux_init(dev, PLANCK_DEV_UCSI, ec);
+}
+
+static const struct i2c_device_id planck_ec_id[] = {
+	{ "huawei-planck-ec", },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, planck_ec_id);
+
+static const struct of_device_id planck_ec_of_match[] = {
+	{ .compatible = "huawei,planck-ec", },
+	{ }
+};
+MODULE_DEVICE_TABLE(of, planck_ec_of_match);
+
+static struct i2c_driver planck_ec_driver = {
+	.driver = {
+		.name = "huawei-planck-ec",
+		.of_match_table = planck_ec_of_match,
+	},
+	.probe = planck_ec_probe,
+	.id_table = planck_ec_id,
+};
+module_i2c_driver(planck_ec_driver);
+
+MODULE_DESCRIPTION("HUAWEI MateBook E (2019) embedded controller");
+MODULE_AUTHOR("NewWheat <newwheatzjz@outlook.com>");
+MODULE_LICENSE("GPL");
diff -Naur linux/drivers/platform/arm64/Kconfig orig-linux-sdm845-6.16-dev/drivers/platform/arm64/Kconfig
--- linux/drivers/platform/arm64/Kconfig	2025-07-24 22:16:35.468474562 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/platform/arm64/Kconfig	2025-07-24 22:09:45.456569588 +0800
@@ -54,6 +54,19 @@
 
 	  Say M or Y here to include this support.
 
+config EC_HUAWEI_PLANCK
+	tristate "EC driver for Huawei MateBook E (2019)"
+	depends on ARCH_QCOM || COMPILE_TEST
+	depends on I2C
+	depends on DRM
+	depends on POWER_SUPPLY
+	depends on INPUT
+	select AUXILIARY_BUS
+
+	help
+	  Embedded controller driver for Huawei MateBook E 2019, which supports battery & adapter
+	  status report, lid state report, panel backlight controlling and USCI interface.
+
 config EC_LENOVO_YOGA_C630
 	tristate "Lenovo Yoga C630 Embedded Controller driver"
 	depends on ARCH_QCOM || COMPILE_TEST
diff -Naur linux/drivers/platform/arm64/Makefile orig-linux-sdm845-6.16-dev/drivers/platform/arm64/Makefile
--- linux/drivers/platform/arm64/Makefile	2025-07-24 22:16:40.408473444 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/platform/arm64/Makefile	2025-07-24 16:04:43.931455374 +0800
@@ -7,4 +7,5 @@
 
 obj-$(CONFIG_EC_ACER_ASPIRE1)	+= acer-aspire1-ec.o
 obj-$(CONFIG_EC_HUAWEI_GAOKUN)	+= huawei-gaokun-ec.o
+obj-$(CONFIG_EC_HUAWEI_PLANCK)	+= huawei-planck-ec.o
 obj-$(CONFIG_EC_LENOVO_YOGA_C630) += lenovo-yoga-c630.o
diff -Naur linux/drivers/power/supply/huawei-planck-battery.c orig-linux-sdm845-6.16-dev/drivers/power/supply/huawei-planck-battery.c
--- linux/drivers/power/supply/huawei-planck-battery.c	1970-01-01 08:00:00.000000000 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/power/supply/huawei-planck-battery.c	2025-07-24 18:33:34.895701306 +0800
@@ -0,0 +1,388 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2024-2025
+ *
+ * NewWheat <newwheatzjz@outlook.com>
+ */
+#include <linux/auxiliary_bus.h>
+#include <linux/bits.h>
+#include <linux/cleanup.h>
+#include <linux/jiffies.h>
+#include <linux/module.h>
+#include <linux/notifier.h>
+#include <linux/power_supply.h>
+#include <linux/platform_data/huawei-planck-ec.h>
+
+#define PLANCK_EC_PSY_CACHE_TIME		5000
+
+#define PLANCK_EC_PSY_READ_DATA_CMD		0x80
+#define PLANCK_EC_PSY_READ_OEM_CMD		0x8c
+#define PLANCK_EC_PSY_READ_STATE_CMD		0xdd
+#define PLANCK_EC_PSY_READ_ONLINE_CMD		0xdb
+
+#define PLANCK_EC_PSY_BAT_PRESENT		BIT(1)
+#define PLANCK_EC_PSY_BAT_DISCHARGING		BIT(0)
+#define PLANCK_EC_PSY_BAT_CHARGING		BIT(1)
+
+#define PLANCK_EC_PSY_ADP_ONLINE		BIT(0)
+
+#define PLANCK_EC_PSY_EVENT_22		0x22
+#define PLANCK_EC_PSY_EVENT_23		0x23
+#define PLANCK_EC_PSY_EVENT_30		0x30
+#define PLANCK_EC_PSY_EVENT_31		0x31
+#define PLANCK_EC_PSY_EVENT_32		0x32
+
+struct planck_ec_psy_data {
+	__le16 null1;
+	__le16 serial_number;		/* _BIX */
+	__le16 design_capacity;		/* _BIX */
+	__le16 design_voltage;		/* _BIX */
+	__le16 null2;
+	__le16 null3;
+	__le16 null4;
+	__le16 null5;
+	__le16 voltage_now;		/* _BST */
+	__le16 current_now;		/* _BST */
+	__le16 last_full_capacity;		/* _BIX */
+	__le16 capacity_now;		/* _BST */
+	__le16 cycle_count;		/* _BIX */
+} __packed;
+
+struct planck_ec_psy {
+	struct planck_ec *ec;
+	struct device *dev;
+    struct fwnode_handle *fwnode;
+	struct notifier_block nb;
+	struct power_supply *bat_psy;
+	struct power_supply *adp_psy;
+	unsigned long last_status_update;
+	struct planck_ec_psy_data data;
+	u8 oem;		/* _BIX */
+	u8 state;		/* _BST */
+	u8 online;		/* _STA & _PSR */
+};
+
+static int planck_ec_psy_update_data(struct planck_ec_psy *ec_psy)
+{
+	int ret = 0;
+
+	ret = planck_ec_transfer(ec_psy->ec, PLANCK_EC_PSY_READ_DATA_CMD,
+							 (u8*)&ec_psy->data, sizeof(ec_psy->data), PLANCK_EC_READ_COMMON);
+
+	return ret;
+}
+
+static int planck_ec_psy_info_update(struct planck_ec_psy *ec_psy)
+{
+	int ret = 0;
+
+	ret |= planck_ec_psy_update_data(ec_psy);
+	ret |= planck_ec_transfer(ec_psy->ec, PLANCK_EC_PSY_READ_OEM_CMD,
+							  &ec_psy->oem, sizeof(ec_psy->oem), PLANCK_EC_READ_COMMON);
+	ret |= planck_ec_transfer(ec_psy->ec, PLANCK_EC_PSY_READ_ONLINE_CMD,
+							  &ec_psy->online, sizeof(ec_psy->online), PLANCK_EC_READ_COMMON);
+
+	return ret;
+}
+
+static int planck_ec_psy_status_update(struct planck_ec_psy *ec_psy)
+{
+	int ret = 0;
+
+	if (time_after(jiffies, ec_psy->last_status_update
+							 + msecs_to_jiffies(PLANCK_EC_PSY_CACHE_TIME))) {
+		ret |= planck_ec_psy_update_data(ec_psy);
+		ret |= planck_ec_transfer(ec_psy->ec, PLANCK_EC_PSY_READ_STATE_CMD,
+								  &ec_psy->state, sizeof(ec_psy->state), PLANCK_EC_READ_COMMON);
+
+		ec_psy->last_status_update = jiffies;
+	}
+
+    return ret;
+}
+
+/* Battery */
+
+static const char * const planck_ec_psy_bat_oem[] = {
+	"DYNAPACK",
+	"Sunwoda-S",
+};
+
+static bool planck_ec_psy_bat_is_charged(struct planck_ec_psy *ec_psy)
+{
+	if (ec_psy->data.capacity_now >= ec_psy->data.design_capacity ||
+		ec_psy->data.capacity_now >= ec_psy->data.last_full_capacity)
+		return true;
+
+	return false;
+}
+
+static int planck_ec_psy_bat_get_property(struct power_supply *psy,
+										  enum power_supply_property psp,
+										  union power_supply_propval *val)
+{
+	struct planck_ec_psy *ec_psy = power_supply_get_drvdata(psy);
+	int str_index = ec_psy->oem - 1;
+	char serial_number[6];
+	int ret;
+
+	ret = planck_ec_psy_status_update(ec_psy);
+	if (ret)
+		return ret;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_STATUS:
+		val->intval = POWER_SUPPLY_STATUS_UNKNOWN;
+		if(planck_ec_psy_bat_is_charged(ec_psy))
+			val->intval = POWER_SUPPLY_STATUS_FULL;
+		else if (ec_psy->state & PLANCK_EC_PSY_BAT_DISCHARGING)
+			val->intval = POWER_SUPPLY_STATUS_DISCHARGING;
+		else if (ec_psy->state & PLANCK_EC_PSY_BAT_CHARGING)
+			val->intval = POWER_SUPPLY_STATUS_CHARGING;
+		break;
+
+	case POWER_SUPPLY_PROP_PRESENT:
+		val->intval = !!(ec_psy->online & PLANCK_EC_PSY_BAT_PRESENT);
+		break;
+
+	case POWER_SUPPLY_PROP_TECHNOLOGY:
+		val->intval = POWER_SUPPLY_TECHNOLOGY_LION;
+		break;
+
+	case POWER_SUPPLY_PROP_CYCLE_COUNT:
+		val->intval = le16_to_cpu(ec_psy->data.cycle_count);
+		break;
+
+	case POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN:
+		val->intval = le16_to_cpu(ec_psy->data.design_voltage) * 1000;
+		break;
+
+	case POWER_SUPPLY_PROP_VOLTAGE_NOW:
+		val->intval = le16_to_cpu(ec_psy->data.voltage_now) * 1000;
+		break;
+
+	case POWER_SUPPLY_PROP_CURRENT_NOW:
+		val->intval = (s16)le16_to_cpu(ec_psy->data.current_now) * 1000;
+		break;
+
+	case POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN:
+		val->intval = le16_to_cpu(ec_psy->data.design_capacity) * 1000;
+		break;
+
+	case POWER_SUPPLY_PROP_CHARGE_FULL:
+		val->intval = le16_to_cpu(ec_psy->data.last_full_capacity) * 1000;
+		break;
+
+	case POWER_SUPPLY_PROP_CHARGE_NOW:
+		val->intval = le16_to_cpu(ec_psy->data.capacity_now) * 1000;
+		break;
+
+	case POWER_SUPPLY_PROP_CAPACITY:
+		val->intval = le16_to_cpu(ec_psy->data.capacity_now) * 100
+				      / le16_to_cpu(ec_psy->data.last_full_capacity);
+		break;
+
+	case POWER_SUPPLY_PROP_SCOPE:
+		val->intval = POWER_SUPPLY_SCOPE_SYSTEM;
+		break;
+
+	case POWER_SUPPLY_PROP_MODEL_NAME:
+		val->strval = "HB30C4J7ECW-21";
+		break;
+
+	case POWER_SUPPLY_PROP_MANUFACTURER:
+		if (str_index >= 0 && str_index < ARRAY_SIZE(planck_ec_psy_bat_oem))
+			val->strval = planck_ec_psy_bat_oem[str_index];
+		else {
+			dev_err(ec_psy->dev, "Battery OEM unknown: %d\n", str_index);
+			val->strval = "Unknown";
+		}
+		break;
+
+	case POWER_SUPPLY_PROP_SERIAL_NUMBER:
+		snprintf(serial_number, sizeof(serial_number), "%d", ec_psy->data.serial_number);
+		val->strval = kasprintf(GFP_KERNEL, "%s", serial_number);
+		if (!val->strval)
+			dev_err(ec_psy->dev, "Failed to allocate memory for serial number\n");
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static enum power_supply_property planck_ec_psy_bat_props[] = {
+	POWER_SUPPLY_PROP_STATUS,
+	POWER_SUPPLY_PROP_PRESENT,
+	POWER_SUPPLY_PROP_TECHNOLOGY,
+	POWER_SUPPLY_PROP_CYCLE_COUNT,
+	POWER_SUPPLY_PROP_VOLTAGE_MAX_DESIGN,
+	POWER_SUPPLY_PROP_VOLTAGE_NOW,
+	POWER_SUPPLY_PROP_CURRENT_NOW,
+	POWER_SUPPLY_PROP_CHARGE_FULL_DESIGN,
+	POWER_SUPPLY_PROP_CHARGE_FULL,
+	POWER_SUPPLY_PROP_CHARGE_NOW,
+	POWER_SUPPLY_PROP_CAPACITY,
+	POWER_SUPPLY_PROP_SCOPE,
+	POWER_SUPPLY_PROP_MODEL_NAME,
+	POWER_SUPPLY_PROP_MANUFACTURER,
+	POWER_SUPPLY_PROP_SERIAL_NUMBER,
+};
+
+static const struct power_supply_desc planck_ec_psy_bat_desc = {
+	.name = "planck-ec-battery",
+	.type = POWER_SUPPLY_TYPE_BATTERY,
+	.get_property = planck_ec_psy_bat_get_property,
+	.properties	= planck_ec_psy_bat_props,
+	.num_properties	= ARRAY_SIZE(planck_ec_psy_bat_props),
+};
+
+/* Adapter */
+
+static int planck_ec_psy_adp_get_property(struct power_supply *psy,
+										  enum power_supply_property psp,
+										  union power_supply_propval *val)
+{
+	struct planck_ec_psy *ec_psy = power_supply_get_drvdata(psy);
+	int ret;
+
+	ret = planck_ec_psy_info_update(ec_psy);
+	if (ret)
+		return 0;
+
+	switch (psp) {
+	case POWER_SUPPLY_PROP_ONLINE:
+		val->intval = !!(ec_psy->online & PLANCK_EC_PSY_ADP_ONLINE);
+		break;
+
+	case POWER_SUPPLY_PROP_USB_TYPE:
+		val->intval = POWER_SUPPLY_USB_TYPE_C;
+		break;
+
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+static enum power_supply_property planck_ec_psy_adp_props[] = {
+	POWER_SUPPLY_PROP_ONLINE,
+	POWER_SUPPLY_PROP_USB_TYPE,
+};
+
+static const struct power_supply_desc planck_ec_psy_adp_desc = {
+	.name = "planck-ec-adapter",
+	.type = POWER_SUPPLY_TYPE_USB,
+	.usb_types = BIT(POWER_SUPPLY_USB_TYPE_C),
+	.get_property = planck_ec_psy_adp_get_property,
+	.properties	= planck_ec_psy_adp_props,
+	.num_properties	= ARRAY_SIZE(planck_ec_psy_adp_props),
+};
+
+static int planck_ec_psy_notify(struct notifier_block *nb,
+								unsigned long action, void *data)
+{
+	struct planck_ec_psy *ec_psy = container_of(nb, struct planck_ec_psy, nb);
+
+	switch (action) {
+	case PLANCK_EC_PSY_EVENT_22:
+	case PLANCK_EC_PSY_EVENT_23:
+		power_supply_changed(ec_psy->adp_psy);
+		power_supply_changed(ec_psy->bat_psy);
+		break;
+
+	case PLANCK_EC_PSY_EVENT_31:
+		planck_ec_psy_info_update(ec_psy);
+		fallthrough;
+	case PLANCK_EC_PSY_EVENT_30:
+	case PLANCK_EC_PSY_EVENT_32:
+		power_supply_changed(ec_psy->bat_psy);
+		break;
+
+	default:
+		return NOTIFY_OK;
+	}
+
+	return NOTIFY_OK;
+}
+
+static int planck_ec_psy_probe(struct auxiliary_device *adev,
+							   const struct auxiliary_device_id *id)
+{
+	struct planck_ec *ec = adev->dev.platform_data;
+	struct power_supply_config adp_cfg = {};
+	struct power_supply_config bat_cfg = {};
+	struct device *dev = &adev->dev;
+	struct planck_ec_psy *ec_psy;
+	int ret;
+
+	ec_psy = devm_kzalloc(&adev->dev, sizeof(*ec_psy), GFP_KERNEL);
+	if (!ec_psy)
+		return -ENOMEM;
+
+	ec_psy->ec = ec;
+	ec_psy->dev = dev;
+	ec_psy->fwnode = adev->dev.parent->fwnode;
+	ec_psy->nb.notifier_call = planck_ec_psy_notify;
+
+	auxiliary_set_drvdata(adev, ec_psy);
+
+    bat_cfg.drv_data = ec_psy;
+	bat_cfg.fwnode = ec_psy->fwnode;
+	bat_cfg.no_wakeup_source = true;
+	ec_psy->bat_psy = power_supply_register(dev, &planck_ec_psy_bat_desc, &bat_cfg);
+	if (IS_ERR(ec_psy->bat_psy)) {
+		return dev_err_probe(ec_psy->dev, PTR_ERR(ec_psy->bat_psy),
+							 "Failed to register battery supply\n");
+	}
+
+	adp_cfg.drv_data = ec_psy;
+	adp_cfg.fwnode = ec_psy->fwnode;
+	adp_cfg.supplied_to = (char **)&planck_ec_psy_bat_desc.name;
+	adp_cfg.num_supplicants = 1;
+	adp_cfg.no_wakeup_source = true;
+	ec_psy->adp_psy = devm_power_supply_register(dev, &planck_ec_psy_adp_desc, &adp_cfg);
+	if (IS_ERR(ec_psy->adp_psy)) {
+		return dev_err_probe(dev, PTR_ERR(ec_psy->adp_psy),
+							 "Failed to register AC adapter supply\n");
+	}
+
+    planck_ec_psy_info_update(ec_psy);
+
+	ret = planck_ec_register_notify(ec_psy->ec, &ec_psy->nb);
+	if (ret < 0) {
+		dev_err(ec_psy->dev, "Failed to register notify block: %pe\n", ERR_PTR(ret));
+		return ret;
+	}
+
+	return 0;
+}
+
+static void planck_ec_psy_remove(struct auxiliary_device *adev)
+{
+	struct planck_ec_psy *ec_psy = auxiliary_get_drvdata(adev);
+
+	planck_ec_unregister_notify(ec_psy->ec, &ec_psy->nb);
+	power_supply_unregister(ec_psy->bat_psy);
+}
+
+static const struct auxiliary_device_id planck_ec_psy_id[] = {
+	{ .name = PLANCK_MOD_NAME "." PLANCK_DEV_PSY, },
+	{}
+};
+MODULE_DEVICE_TABLE(auxiliary, planck_ec_psy_id);
+
+static struct auxiliary_driver planck_ec_psy_driver = {
+	.name = PLANCK_DEV_PSY,
+	.id_table = planck_ec_psy_id,
+	.probe = planck_ec_psy_probe,
+	.remove = planck_ec_psy_remove,
+};
+
+module_auxiliary_driver(planck_ec_psy_driver);
+
+MODULE_DESCRIPTION("HUAWEI MateBook E (2019) psy");
+MODULE_LICENSE("GPL");
diff -Naur linux/drivers/power/supply/Kconfig orig-linux-sdm845-6.16-dev/drivers/power/supply/Kconfig
--- linux/drivers/power/supply/Kconfig	2025-07-24 22:16:09.508480500 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/power/supply/Kconfig	2025-07-08 16:49:09.888459821 +0800
@@ -183,6 +183,14 @@
 	  To compile the driver as a module, choose M here: the module will be
 	  called huawei-gaokun-battery.
 
+config BATTERY_HUAWEI_PLANCK
+	tristate "HUAWEI MateBook E (2019) power supply"
+	depends on EC_HUAWEI_PLANCK
+	help
+	  This driver enables battery and adapter support for HUAWEI MateBook E (2019).
+
+	  To compile the driver as a module, choose M here.
+
 config BATTERY_LEGO_EV3
 	tristate "LEGO MINDSTORMS EV3 battery"
 	depends on OF && IIO && GPIOLIB && (ARCH_DAVINCI_DA850 || COMPILE_TEST)
diff -Naur linux/drivers/power/supply/Makefile orig-linux-sdm845-6.16-dev/drivers/power/supply/Makefile
--- linux/drivers/power/supply/Makefile	2025-07-24 22:16:17.752478566 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/power/supply/Makefile	2025-07-06 22:45:25.219345757 +0800
@@ -33,6 +33,7 @@
 obj-$(CONFIG_BATTERY_GAUGE_LTC2941)	+= ltc2941-battery-gauge.o
 obj-$(CONFIG_BATTERY_GOLDFISH)	+= goldfish_battery.o
 obj-$(CONFIG_BATTERY_HUAWEI_GAOKUN)	+= huawei-gaokun-battery.o
+obj-$(CONFIG_BATTERY_HUAWEI_PLANCK)	+= huawei-planck-battery.o
 obj-$(CONFIG_BATTERY_LEGO_EV3)	+= lego_ev3_battery.o
 obj-$(CONFIG_BATTERY_LENOVO_YOGA_C630) += lenovo_yoga_c630_battery.o
 obj-$(CONFIG_BATTERY_PMU)	+= pmu_battery.o
diff -Naur linux/drivers/usb/typec/ucsi/Kconfig orig-linux-sdm845-6.16-dev/drivers/usb/typec/ucsi/Kconfig
--- linux/drivers/usb/typec/ucsi/Kconfig	2025-07-24 22:17:01.684468651 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/usb/typec/ucsi/Kconfig	2025-07-07 23:16:57.697169797 +0800
@@ -103,4 +103,13 @@
 	  To compile the driver as a module, choose M here: the module will be
 	  called ucsi_huawei_gaokun.
 
+config UCSI_HUAWEI_PLANCK
+	tristate "UCSI Interface Driver for HUAWEI MateBook E (2019)"
+	depends on EC_HUAWEI_PLANCK
+	select DRM_AUX_HPD_BRIDGE if DRM_BRIDGE && OF
+	help
+	  This driver enables UCSI support on the HUAWEI MateBook E (2019) tablet.
+
+	  To compile the driver as a module, choose M here.
+
 endif
diff -Naur linux/drivers/usb/typec/ucsi/Makefile orig-linux-sdm845-6.16-dev/drivers/usb/typec/ucsi/Makefile
--- linux/drivers/usb/typec/ucsi/Makefile	2025-07-24 22:17:07.032467433 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/usb/typec/ucsi/Makefile	2025-07-07 23:12:19.169213144 +0800
@@ -24,3 +24,4 @@
 obj-$(CONFIG_CROS_EC_UCSI)		+= cros_ec_ucsi.o
 obj-$(CONFIG_UCSI_LENOVO_YOGA_C630)	+= ucsi_yoga_c630.o
 obj-$(CONFIG_UCSI_HUAWEI_GAOKUN)	+= ucsi_huawei_gaokun.o
+obj-$(CONFIG_UCSI_HUAWEI_PLANCK)	+= ucsi_huawei_planck.o
diff -Naur linux/drivers/usb/typec/ucsi/ucsi_huawei_planck.c orig-linux-sdm845-6.16-dev/drivers/usb/typec/ucsi/ucsi_huawei_planck.c
--- linux/drivers/usb/typec/ucsi/ucsi_huawei_planck.c	1970-01-01 08:00:00.000000000 +0800
+++ orig-linux-sdm845-6.16-dev/drivers/usb/typec/ucsi/ucsi_huawei_planck.c	2025-07-24 18:33:39.763700371 +0800
@@ -0,0 +1,346 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Copyright (C) 2024-2025
+ *
+ * NewWheat <newwheatzjz@outlook.com>
+ */
+#include <linux/auxiliary_bus.h>
+#include <linux/module.h>
+#include <linux/notifier.h>
+#include <linux/of.h>
+#include <linux/platform_data/huawei-planck-ec.h>
+#include <linux/property.h>
+#include <linux/string.h>
+#include <linux/usb/typec_dp.h>
+
+#include <drm/bridge/aux-bridge.h>
+
+#include "ucsi.h"
+
+#define PLANCK_EC_UCSI_READ_DATA_CMD		0x0
+#define PLANCK_EC_UCSI_READ_HPD_CMD		0x40
+
+#define PLANCK_EC_UCSI_EVENT_UCSI		0x10
+#define PLANCK_EC_UCSI_EVENT_HPD		0x40
+
+struct planck_ec_ucsi_in_data {
+	u16 version;
+	u8 null1[2];
+	u8 cci[4];
+	u8 null2[8];
+	u8 msg[16];
+} __packed;
+
+struct planck_ec_ucsi_out_data {
+	u8 null1[9];
+	u8 control[8];
+	u8 null2[16];
+	u8 msg[16];
+} __packed;
+
+struct planck_ec_ucsi {
+	struct planck_ec *ec;
+	struct auxiliary_device *bridge;
+	struct notifier_block nb;
+	struct ucsi *ucsi;
+    struct planck_ec_ucsi_in_data ucsi_in;
+};
+
+/* UCSI */
+
+static int planck_ec_ucsi_update(struct planck_ec_ucsi *ec_ucsi)
+{
+	int ret;
+
+	ret = planck_ec_transfer(ec_ucsi->ec, PLANCK_EC_UCSI_READ_DATA_CMD,
+							 (u8*)&ec_ucsi->ucsi_in, sizeof(ec_ucsi->ucsi_in), PLANCK_EC_READ_UCSI);
+
+	return ret < 0 ? ret : 0;
+}
+
+static int planck_ec_ucsi_read_version(struct ucsi *ucsi, u16 *version)
+{
+	struct planck_ec_ucsi *ec_ucsi = ucsi_get_drvdata(ucsi);
+	int ret;
+
+	ret = planck_ec_ucsi_update(ec_ucsi);
+	if (ret < 0)
+		return ret;
+
+	memcpy(version, (u8*)&ec_ucsi->ucsi_in.version, sizeof(*version));
+
+	return 0;
+}
+
+static int planck_ec_ucsi_poll_cci(struct ucsi *ucsi, u32 *cci)
+{
+	struct planck_ec_ucsi *ec_ucsi = ucsi_get_drvdata(ucsi);
+	int ret;
+
+	ret = planck_ec_ucsi_update(ec_ucsi);
+	if (ret < 0)
+		return ret;
+
+	memcpy(cci, (u8*)&ec_ucsi->ucsi_in.cci, sizeof(*cci));
+
+	return 0;
+}
+
+static int planck_ec_ucsi_read_cci(struct ucsi *ucsi, u32 *cci)
+{
+	struct planck_ec_ucsi *ec_ucsi = ucsi_get_drvdata(ucsi);
+
+	memcpy(cci, (u8*)&ec_ucsi->ucsi_in.cci, sizeof(*cci));
+
+	return 0;
+}
+
+static int planck_ec_ucsi_read_message_in(struct ucsi *ucsi, void *val, size_t val_len)
+{
+	struct planck_ec_ucsi *ec_ucsi = ucsi_get_drvdata(ucsi);
+
+	memcpy(val, (u8*)&ec_ucsi->ucsi_in.msg, val_len);
+
+	return 0;
+}
+
+static int planck_ec_ucsi_async_control(struct ucsi *ucsi, u64 command)
+{
+	struct planck_ec_ucsi *ec_ucsi = ucsi_get_drvdata(ucsi);
+	struct planck_ec_ucsi_out_data data = {0};
+    int ret;
+
+	memcpy(&data.control, &command, sizeof(command));
+
+	ret = planck_ec_transfer(ec_ucsi->ec, 0, (u8*)&data, sizeof(data), PLANCK_EC_WRITE_UCSI);
+
+    if (ret < 0) {
+		return ret;
+	}
+
+	return 0;
+}
+
+static int planck_ec_ucsi_sync_control(struct ucsi *ucsi, u64 command, u32 *cci,
+                                       void *data, size_t data_len)
+{
+	int ret;
+
+	if (UCSI_COMMAND(command) == UCSI_GET_ALTERNATE_MODES &&
+		UCSI_ALTMODE_RECIPIENT(command) == UCSI_RECIPIENT_CON &&
+		UCSI_ALTMODE_OFFSET(command) == 0) {
+		static const struct ucsi_altmode alt = {
+			.svid = USB_TYPEC_DP_SID,
+			.mid = USB_TYPEC_DP_MODE,
+		};
+
+		memset(data, 0, data_len);
+		memcpy(data, &alt, min(sizeof(alt), data_len));
+		*cci = UCSI_CCI_COMMAND_COMPLETE | UCSI_SET_CCI_LENGTH(sizeof(alt));
+		return 0;
+	}
+
+	ret = ucsi_sync_control_common(ucsi, command, cci, data, data_len);
+	if (ret < 0)
+		return ret;
+
+	if (UCSI_COMMAND(command) == UCSI_GET_CURRENT_CAM && data) {
+		((u8 *)data)[0]--;
+	}
+
+	return 0;
+}
+
+static bool planck_ec_ucsi_update_altmodes(struct ucsi *ucsi, u8 recipient,
+										   struct ucsi_altmode *orig,
+										   struct ucsi_altmode *updated)
+{
+	int i;
+
+	if (orig[0].svid == 0 || recipient != UCSI_RECIPIENT_SOP)
+		return false;
+
+	/* EC is nice and repeats altmodes again and again. Ignore copies. */
+	for (i = 1; i < UCSI_MAX_ALTMODES; i++) {
+		if (orig[i].svid == orig[0].svid) {
+			dev_dbg(ucsi->dev, "Found duplicate altmodes, starting from %d\n", i);
+			memset(&orig[i], 0, (UCSI_MAX_ALTMODES - i) * sizeof(*orig));
+			break;
+		}
+	}
+
+	return false;
+}
+
+static void planck_ec_ucsi_update_connector(struct ucsi_connector *con)
+{
+	con->typec_cap.orientation_aware = true;
+}
+
+static const struct ucsi_operations planck_ec_ucsi_ops = {
+	.read_version = planck_ec_ucsi_read_version,
+	.poll_cci = planck_ec_ucsi_poll_cci,
+	.read_cci = planck_ec_ucsi_read_cci,
+	.read_message_in = planck_ec_ucsi_read_message_in,
+	.async_control = planck_ec_ucsi_async_control,
+	.sync_control = planck_ec_ucsi_sync_control,
+	.update_altmodes = planck_ec_ucsi_update_altmodes,
+	.update_connector = planck_ec_ucsi_update_connector,
+};
+
+/* DP Altmode */
+
+struct planck_ec_ucsi_port_data {
+	u8 ccst;
+	u8 muxc;
+	u8 dppn;
+	u8 d7t3;
+	u8 d7t4;
+	u8 d7t5;
+	u8 d7t6;
+	u8 hsfl;
+} __packed;
+
+static void planck_ec_ucsi_read_port_status(struct planck_ec_ucsi *ec_ucsi)
+{
+	struct planck_ec_ucsi_port_data data;
+	int ret;
+
+	ret = planck_ec_transfer(ec_ucsi->ec, PLANCK_EC_UCSI_READ_HPD_CMD,
+							 (u8 *)&data, sizeof(data), PLANCK_EC_READ_COMMON);
+
+	if (ret < 0) {
+		return;
+	}
+
+	dev_dbg(ec_ucsi->ucsi->dev, "muxc: %d, ccst: %d, dppn: %d, hsfl: %d\n",
+			 data.muxc, data.ccst, data.dppn, data.hsfl);
+
+	if (ec_ucsi->ucsi->connector && ec_ucsi->ucsi->connector[0].port)
+		typec_set_orientation(ec_ucsi->ucsi->connector[0].port,
+							  data.ccst == 1 ?
+							  TYPEC_ORIENTATION_REVERSE :
+							  TYPEC_ORIENTATION_NORMAL);
+
+	if (ec_ucsi->bridge)
+		drm_aux_hpd_bridge_notify(&ec_ucsi->bridge->dev,
+								  data.d7t3 != 0 ?
+								  connector_status_connected :
+								  connector_status_disconnected);
+}
+
+static int planck_ec_ucsi_notify(struct notifier_block *nb,
+								 unsigned long action, void *data)
+{
+	struct planck_ec_ucsi *ec_ucsi = container_of(nb, struct planck_ec_ucsi, nb);
+	u32 cci;
+	int ret;
+
+	switch (action) {
+	case PLANCK_EC_UCSI_EVENT_UCSI:
+		ret = planck_ec_ucsi_poll_cci(ec_ucsi->ucsi, &cci);
+		if (ret < 0)
+			return NOTIFY_DONE;
+
+		ucsi_notify_common(ec_ucsi->ucsi, cci);
+		break;
+
+	case PLANCK_EC_UCSI_EVENT_HPD:
+		planck_ec_ucsi_read_port_status(ec_ucsi);
+		ucsi_connector_change(ec_ucsi->ucsi, 1);
+		break;
+
+	default:
+		return NOTIFY_OK;
+	}
+
+	return NOTIFY_OK;
+}
+
+static int planck_ec_ucsi_probe(struct auxiliary_device *adev,
+								const struct auxiliary_device_id *id)
+{
+	struct planck_ec *ec = adev->dev.platform_data;
+	struct planck_ec_ucsi *ec_ucsi;
+	struct fwnode_handle *fwnode;
+	int ret;
+
+	ec_ucsi = devm_kzalloc(&adev->dev, sizeof(*ec_ucsi), GFP_KERNEL);
+	if (!ec_ucsi)
+		return -ENOMEM;
+
+	ec_ucsi->ec = ec;
+	ec_ucsi->nb.notifier_call = planck_ec_ucsi_notify;
+
+	fwnode = device_get_named_child_node(&adev->dev, "connector");
+	if (fwnode) {
+		ec_ucsi->bridge = devm_drm_dp_hpd_bridge_alloc(&adev->dev, to_of_node(fwnode));
+		if (IS_ERR(ec_ucsi->bridge))
+			return PTR_ERR(ec_ucsi->bridge);
+
+		ret = devm_drm_dp_hpd_bridge_add(&adev->dev, ec_ucsi->bridge);
+		if (ret < 0)
+			return dev_err_probe(&adev->dev, ret, "Failed to add drm aux-bridge\n");
+	}
+	else {
+		dev_err(&adev->dev, "Child node \"connector\" not found\n");
+		return -ENODEV;
+	}
+
+	ec_ucsi->ucsi = ucsi_create(&adev->dev, &planck_ec_ucsi_ops);
+	if (IS_ERR(ec_ucsi->ucsi))
+		return PTR_ERR(ec_ucsi->ucsi);
+
+	ucsi_set_drvdata(ec_ucsi->ucsi, ec_ucsi);
+
+	auxiliary_set_drvdata(adev, ec_ucsi);
+
+	ret = planck_ec_register_notify(ec, &ec_ucsi->nb);
+	if (ret < 0) {
+		dev_err_probe(&adev->dev, ret, "Failed to register notify block\n");
+		goto err_destroy;
+	}
+
+	ret = ucsi_register(ec_ucsi->ucsi);
+	if (ret < 0) {
+		dev_err_probe(&adev->dev, ret, "Failed to register UCSI\n");
+		goto err_unregister;
+	}
+
+	return 0;
+
+err_unregister:
+	planck_ec_unregister_notify(ec_ucsi->ec, &ec_ucsi->nb);
+
+err_destroy:
+	ucsi_destroy(ec_ucsi->ucsi);
+
+	return ret;
+}
+
+static void planck_ec_ucsi_remove(struct auxiliary_device *adev)
+{
+	struct planck_ec_ucsi *ec_ucsi = auxiliary_get_drvdata(adev);
+
+	ucsi_unregister(ec_ucsi->ucsi);
+	planck_ec_unregister_notify(ec_ucsi->ec, &ec_ucsi->nb);
+	ucsi_destroy(ec_ucsi->ucsi);
+}
+
+static const struct auxiliary_device_id planck_ec_ucsi_id[] = {
+	{ .name = PLANCK_MOD_NAME "." PLANCK_DEV_UCSI, },
+	{}
+};
+MODULE_DEVICE_TABLE(auxiliary, planck_ec_ucsi_id);
+
+static struct auxiliary_driver planck_ec_ucsi_driver = {
+	.name = PLANCK_DEV_UCSI,
+	.id_table = planck_ec_ucsi_id,
+	.probe = planck_ec_ucsi_probe,
+	.remove = planck_ec_ucsi_remove,
+};
+
+module_auxiliary_driver(planck_ec_ucsi_driver);
+
+MODULE_DESCRIPTION("HUAWEI MateBook E (2019) UCSI");
+MODULE_LICENSE("GPL");
